From 2e4aa5a7a63fa063f9486512296d74787cf08608 Mon Sep 17 00:00:00 2001
From: Gergely Kovacs <Gergely.Kovacs2@arm.com>
Date: Thu, 5 Dec 2024 13:51:23 +0000
Subject: [PATCH 4/4] build: Enable armclang MVE

The vulnerability preventing the use of MVE was already fixed when FPU
was enabled. For m55 and m85 the compiler specifies the allowed -mcpu
feature combinations. These are different when -march is used. Also
armlink accepts only a few options when architecture is given.

Signed-off-by: Gergely Kovacs <Gergely.Kovacs2@arm.com>
Change-Id: I1351a7b4e9d383894204a0ddbc8b5317ab3dbafe
---
 config/cp_check.cmake                   |  2 +-
 platform/ns/toolchain_ns_ARMCLANG.cmake | 90 ++++++++++++++++++-------
 toolchain_ARMCLANG.cmake                | 87 +++++++++++++++++-------
 3 files changed, 128 insertions(+), 51 deletions(-)

diff --git a/config/cp_check.cmake b/config/cp_check.cmake
index b6a1963a1..7463b174a 100644
--- a/config/cp_check.cmake
+++ b/config/cp_check.cmake
@@ -25,7 +25,7 @@ endif()
 
 ########################## FPU and MVE #########################################
 
-tfm_invalid_config(NOT CMAKE_C_COMPILER_ID STREQUAL "GNU" AND (CONFIG_TFM_ENABLE_MVE OR CONFIG_TFM_ENABLE_MVE_FP))
+tfm_invalid_config(CMAKE_C_COMPILER_ID STREQUAL "IAR" AND (CONFIG_TFM_ENABLE_MVE OR CONFIG_TFM_ENABLE_MVE_FP))
 tfm_invalid_config((NOT CONFIG_TFM_FP_ARCH) AND (CONFIG_TFM_ENABLE_FP OR CONFIG_TFM_ENABLE_MVE_FP))
 tfm_invalid_config((CMAKE_C_COMPILER_ID STREQUAL "ARMClang") AND (NOT CONFIG_TFM_FP_ARCH_ASM) AND CONFIG_TFM_ENABLE_FP)
 tfm_invalid_config((NOT CONFIG_TFM_ENABLE_FP AND NOT CONFIG_TFM_ENABLE_MVE AND NOT CONFIG_TFM_ENABLE_MVE_FP) AND CONFIG_TFM_LAZY_STACKING)
diff --git a/platform/ns/toolchain_ns_ARMCLANG.cmake b/platform/ns/toolchain_ns_ARMCLANG.cmake
index 77956e062..31e9d05cc 100644
--- a/platform/ns/toolchain_ns_ARMCLANG.cmake
+++ b/platform/ns/toolchain_ns_ARMCLANG.cmake
@@ -43,8 +43,15 @@ if (DEFINED TFM_SYSTEM_PROCESSOR)
     set(CMAKE_SYSTEM_PROCESSOR       ${TFM_SYSTEM_PROCESSOR})
 
     if (TFM_SYSTEM_ARCHITECTURE STREQUAL "armv8.1-m.main")
-        message(WARNING "MVE is not yet supported using ARMCLANG")
-        string(APPEND CMAKE_SYSTEM_PROCESSOR "+nomve")
+        if(NOT CONFIG_TFM_ENABLE_MVE)
+            string(APPEND CMAKE_SYSTEM_PROCESSOR "+nomve")
+        endif()
+        if((NOT TFM_SYSTEM_PROCESSOR STREQUAL "cortex-m85")
+            AND (NOT CONFIG_TFM_ENABLE_MVE_FP)
+            AND CONFIG_TFM_ENABLE_MVE
+            AND CONFIG_TFM_ENABLE_FP)
+                string(APPEND CMAKE_SYSTEM_PROCESSOR "+nomve.fp")
+        endif()
     endif()
 
     if (DEFINED TFM_SYSTEM_DSP)
@@ -57,7 +64,7 @@ if (DEFINED TFM_SYSTEM_PROCESSOR)
     # 'cortex-m4', 'cortex-m7', 'cortex-m33', 'cortex-m35p', 'cortex-m55' and 'cortex-m85'.
     # Build fails if other M-profile cpu, such as 'cortex-m23', is added with '+nofp'.
     # Explicitly list those cpu to align with ARMCLANG description.
-    if (NOT CONFIG_TFM_FLOAT_ABI STREQUAL "hard" AND
+    if (NOT CONFIG_TFM_ENABLE_FP AND
         (TFM_SYSTEM_PROCESSOR STREQUAL "cortex-m4"
         OR TFM_SYSTEM_PROCESSOR STREQUAL "cortex-m7"
         OR TFM_SYSTEM_PROCESSOR STREQUAL "cortex-m33"
@@ -80,17 +87,30 @@ set(CMAKE_C_COMPILER_TARGET      arm-${CROSS_COMPILE})
 set(CMAKE_CXX_COMPILER_TARGET    arm-${CROSS_COMPILE})
 set(CMAKE_ASM_COMPILER_TARGET    arm-${CROSS_COMPILE})
 
-# MVE is currently not supported in case of armclang
 if (TFM_SYSTEM_ARCHITECTURE STREQUAL "armv8.1-m.main")
-    string(APPEND CMAKE_SYSTEM_ARCH "+nomve")
-endif()
+    if(CONFIG_TFM_ENABLE_MVE_FP)
+        string(APPEND CMAKE_SYSTEM_ARCH "+mve.fp")
+    elseif(CONFIG_TFM_ENABLE_MVE)
+        string(APPEND CMAKE_SYSTEM_ARCH "+mve")
+    elseif(TFM_SYSTEM_DSP)
+        string(APPEND CMAKE_SYSTEM_ARCH "+dsp")
+    endif()
 
-if (DEFINED TFM_SYSTEM_DSP)
-    if(NOT TFM_SYSTEM_DSP)
-        string(APPEND CMAKE_SYSTEM_ARCH "+nodsp")
+    # Generic fp extension names to be used instead of -mfpu
+    # +fp/fpv5-sp-d16 is not handled as it is the default
+    if(CONFIG_TFM_ENABLE_FP)
+        if (CONFIG_TFM_FP_ARCH STREQUAL "fpv5-d16")
+            string(APPEND CMAKE_SYSTEM_ARCH "+fp.dp")
+        endif()
+    else()
+        string(APPEND CMAKE_SYSTEM_ARCH "+nofp")
     endif()
 endif()
 
+if(TFM_SYSTEM_DSP AND (NOT TFM_SYSTEM_ARCHITECTURE STREQUAL "armv8.1-m.main"))
+    string(APPEND CMAKE_SYSTEM_ARCH "+dsp")
+endif()
+
 # Cmake's ARMClang support has several issues with compiler validation. To
 # avoid these, we set the list of supported -mcpu and -march variables to
 # the ones we intend to use so that the validation will never fail.
@@ -114,28 +134,42 @@ if (ARMCLANG_VERSION VERSION_GREATER_EQUAL 6.15 AND
                         " Please use other Armclang versions instead.")
 endif()
 
+
 if (CMAKE_SYSTEM_PROCESSOR)
     set(CMAKE_C_FLAGS "-mcpu=${CMAKE_SYSTEM_PROCESSOR}")
     set(CMAKE_CXX_FLAGS "-mcpu=${CMAKE_SYSTEM_PROCESSOR}")
     set(CMAKE_ASM_FLAGS "--target=${CMAKE_ASM_COMPILER_TARGET} -mcpu=${CMAKE_SYSTEM_PROCESSOR}")
-    set(CMAKE_C_LINK_FLAGS   "--cpu=${CMAKE_SYSTEM_PROCESSOR}")
-    set(CMAKE_CXX_LINK_FLAGS "--cpu=${CMAKE_SYSTEM_PROCESSOR}")
-    set(CMAKE_ASM_LINK_FLAGS "--cpu=${CMAKE_SYSTEM_PROCESSOR}")
+
+    set(ARMLINK_MAPPED_OPTION "--cpu=${CMAKE_SYSTEM_PROCESSOR}")
     # But armlink doesn't support this +dsp syntax
-    string(REGEX REPLACE "\\+nodsp" "" CMAKE_C_LINK_FLAGS   "${CMAKE_C_LINK_FLAGS}")
-    string(REGEX REPLACE "\\+nodsp" "" CMAKE_CXX_LINK_FLAGS "${CMAKE_CXX_LINK_FLAGS}")
-    string(REGEX REPLACE "\\+nodsp" "" CMAKE_ASM_LINK_FLAGS "${CMAKE_ASM_LINK_FLAGS}")
-    # And uses different syntax for +nofp
-    string(REGEX REPLACE "\\+nofp" ".no_fp" CMAKE_C_LINK_FLAGS   "${CMAKE_C_LINK_FLAGS}")
-    string(REGEX REPLACE "\\+nofp" ".no_fp" CMAKE_CXX_LINK_FLAGS "${CMAKE_CXX_LINK_FLAGS}")
-    string(REGEX REPLACE "\\+nofp" ".no_fp" CMAKE_ASM_LINK_FLAGS "${CMAKE_ASM_LINK_FLAGS}")
-
-    string(REGEX REPLACE "\\+nomve" ".no_mve" CMAKE_C_LINK_FLAGS   "${CMAKE_C_LINK_FLAGS}")
-    string(REGEX REPLACE "\\+nomve" ".no_mve" CMAKE_CXX_LINK_FLAGS "${CMAKE_CXX_LINK_FLAGS}")
-    string(REGEX REPLACE "\\+nomve" ".no_mve" CMAKE_ASM_LINK_FLAGS "${CMAKE_ASM_LINK_FLAGS}")
+    string(REGEX REPLACE "\\+nodsp"         ""          ARMLINK_MAPPED_OPTION "${ARMLINK_MAPPED_OPTION}")
+    # And uses different syntax for +nofp, +nomve.fp, nomve
+    string(REGEX REPLACE "\\+nofp"          ".no_fp"    ARMLINK_MAPPED_OPTION "${ARMLINK_MAPPED_OPTION}")
+    string(REGEX REPLACE "\\+nomve\\.fp"    ".no_mvefp" ARMLINK_MAPPED_OPTION "${ARMLINK_MAPPED_OPTION}")
+    string(REGEX REPLACE "\\+nomve"         ".no_mve"   ARMLINK_MAPPED_OPTION "${ARMLINK_MAPPED_OPTION}")
+
+    set(CMAKE_C_LINK_FLAGS ${ARMLINK_MAPPED_OPTION})
+    set(CMAKE_CXX_LINK_FLAGS ${ARMLINK_MAPPED_OPTION})
+    set(CMAKE_ASM_LINK_FLAGS ${ARMLINK_MAPPED_OPTION})
 else()
     set(CMAKE_C_FLAGS "-march=${CMAKE_SYSTEM_ARCH}")
     set(CMAKE_CXX_FLAGS "-march=${CMAKE_SYSTEM_ARCH}")
+    set(CMAKE_ASM_FLAGS "--target=${CMAKE_ASM_COMPILER_TARGET} -march=${CMAKE_SYSTEM_ARCH}")
+
+    set(ARMLINK_MAPPED_OPTION "--cpu=${CMAKE_SYSTEM_PROCESSOR}")
+    # Mapping the architecture name
+    string(REGEX REPLACE "armv"         ""      ARMLINK_MAPPED_OPTION   "${ARMLINK_MAPPED_OPTION}")
+    # Armlink uses --fpu option instead of the generic extension names
+    string(REGEX REPLACE "\\+fp\\.dp"   ""      ARMLINK_MAPPED_OPTION   "${ARMLINK_MAPPED_OPTION}")
+    string(REGEX REPLACE "\\+nofp"      ""      ARMLINK_MAPPED_OPTION   "${ARMLINK_MAPPED_OPTION}")
+    # And different syntax for these features
+    string(REGEX REPLACE "\\+mve\\.fp"  ".mve.fp" ARMLINK_MAPPED_OPTION   "${ARMLINK_MAPPED_OPTION}")
+    string(REGEX REPLACE "\\+mve"       ".mve"  ARMLINK_MAPPED_OPTION   "${ARMLINK_MAPPED_OPTION}")
+    string(REGEX REPLACE "\\+dsp"       ".dsp"  ARMLINK_MAPPED_OPTION   "${ARMLINK_MAPPED_OPTION}")
+
+    set(CMAKE_C_LINK_FLAGS ${ARMLINK_MAPPED_OPTION})
+    set(CMAKE_CXX_LINK_FLAGS ${ARMLINK_MAPPED_OPTION})
+    set(CMAKE_ASM_LINK_FLAGS ${ARMLINK_MAPPED_OPTION})
 endif()
 
 # This flag is used to check if toolchain has fixed VLLDM vulnerability
@@ -145,8 +179,14 @@ set(CP_CHECK_C_FLAGS ${CMAKE_C_FLAGS})
 if (CONFIG_TFM_FLOAT_ABI STREQUAL "hard")
     set(COMPILER_CP_C_FLAG "-mfloat-abi=hard")
     if (CONFIG_TFM_ENABLE_FP)
-        set(COMPILER_CP_C_FLAG "-mfloat-abi=hard -mfpu=${CONFIG_TFM_FP_ARCH}")
-        set(COMPILER_CP_ASM_FLAG "-mfloat-abi=hard -mfpu=${CONFIG_TFM_FP_ARCH}")
+        if (TFM_SYSTEM_ARCHITECTURE STREQUAL "armv8.1-m.main")
+            # setting the -mfpu option disables the floating point mve, generic +fp.dp is used instead
+            set(COMPILER_CP_C_FLAG "-mfloat-abi=hard")
+            set(COMPILER_CP_ASM_FLAG "-mfloat-abi=hard")
+        else()
+            set(COMPILER_CP_C_FLAG "-mfloat-abi=hard -mfpu=${CONFIG_TFM_FP_ARCH}")
+            set(COMPILER_CP_ASM_FLAG "-mfloat-abi=hard -mfpu=${CONFIG_TFM_FP_ARCH}")
+        endif()
         # armasm and armlink have the same option "--fpu" and are both used to
         # specify the target FPU architecture. So the supported FPU architecture
         # names can be shared by armasm and armlink.
diff --git a/toolchain_ARMCLANG.cmake b/toolchain_ARMCLANG.cmake
index cc0ac1966..7050adebb 100644
--- a/toolchain_ARMCLANG.cmake
+++ b/toolchain_ARMCLANG.cmake
@@ -36,8 +36,15 @@ if (DEFINED TFM_SYSTEM_PROCESSOR)
     set(CMAKE_SYSTEM_PROCESSOR       ${TFM_SYSTEM_PROCESSOR})
 
     if (TFM_SYSTEM_ARCHITECTURE STREQUAL "armv8.1-m.main")
-        message(WARNING "MVE is not yet supported using ARMCLANG")
-        string(APPEND CMAKE_SYSTEM_PROCESSOR "+nomve")
+        if(NOT CONFIG_TFM_ENABLE_MVE)
+            string(APPEND CMAKE_SYSTEM_PROCESSOR "+nomve")
+        endif()
+        if((NOT TFM_SYSTEM_PROCESSOR STREQUAL "cortex-m85")
+            AND (NOT CONFIG_TFM_ENABLE_MVE_FP)
+            AND CONFIG_TFM_ENABLE_MVE
+            AND CONFIG_TFM_ENABLE_FP)
+                string(APPEND CMAKE_SYSTEM_PROCESSOR "+nomve.fp")
+        endif()
     endif()
 
     if (DEFINED TFM_SYSTEM_DSP)
@@ -73,17 +80,31 @@ set(CMAKE_C_COMPILER_TARGET      arm-${CROSS_COMPILE})
 set(CMAKE_CXX_COMPILER_TARGET    arm-${CROSS_COMPILE})
 set(CMAKE_ASM_COMPILER_TARGET    arm-${CROSS_COMPILE})
 
-# MVE is currently not supported in case of armclang
 if (TFM_SYSTEM_ARCHITECTURE STREQUAL "armv8.1-m.main")
-    string(APPEND CMAKE_SYSTEM_ARCH "+nomve")
-endif()
+    # These three feature options are the only ones armlink accepts
+    if(CONFIG_TFM_ENABLE_MVE_FP)
+        string(APPEND CMAKE_SYSTEM_ARCH "+mve.fp")
+    elseif(CONFIG_TFM_ENABLE_MVE)
+        string(APPEND CMAKE_SYSTEM_ARCH "+mve")
+    elseif(TFM_SYSTEM_DSP)
+        string(APPEND CMAKE_SYSTEM_ARCH "+dsp")
+    endif()
 
-if (DEFINED TFM_SYSTEM_DSP)
-    if(NOT TFM_SYSTEM_DSP)
-        string(APPEND CMAKE_SYSTEM_ARCH "+nodsp")
+    # Generic fp extension names to be used instead of -mfpu
+    # +fp/fpv5-sp-d16 is not handled as it is the default
+    if(CONFIG_TFM_ENABLE_FP)
+        if (CONFIG_TFM_FP_ARCH STREQUAL "fpv5-d16")
+            string(APPEND CMAKE_SYSTEM_ARCH "+fp.dp")
+        endif()
+    else()
+        string(APPEND CMAKE_SYSTEM_ARCH "+nofp")
     endif()
 endif()
 
+if(TFM_SYSTEM_DSP AND (NOT TFM_SYSTEM_ARCHITECTURE STREQUAL "armv8.1-m.main"))
+    string(APPEND CMAKE_SYSTEM_ARCH "+dsp")
+endif()
+
 # Cmake's ARMClang support has several issues with compiler validation. To
 # avoid these, we set the list of supported -mcpu and -march variables to
 # the ones we intend to use so that the validation will never fail.
@@ -159,24 +180,37 @@ if (CMAKE_SYSTEM_PROCESSOR)
     set(CMAKE_C_FLAGS "-mcpu=${CMAKE_SYSTEM_PROCESSOR}")
     set(CMAKE_CXX_FLAGS "-mcpu=${CMAKE_SYSTEM_PROCESSOR}")
     set(CMAKE_ASM_FLAGS "--target=${CMAKE_ASM_COMPILER_TARGET} -mcpu=${CMAKE_SYSTEM_PROCESSOR}")
-    set(CMAKE_C_LINK_FLAGS   "--cpu=${CMAKE_SYSTEM_PROCESSOR}")
-    set(CMAKE_CXX_LINK_FLAGS "--cpu=${CMAKE_SYSTEM_PROCESSOR}")
-    set(CMAKE_ASM_LINK_FLAGS "--cpu=${CMAKE_SYSTEM_PROCESSOR}")
+
+    set(ARMLINK_MAPPED_OPTION "--cpu=${CMAKE_SYSTEM_PROCESSOR}")
     # But armlink doesn't support this +dsp syntax
-    string(REGEX REPLACE "\\+nodsp" "" CMAKE_C_LINK_FLAGS   "${CMAKE_C_LINK_FLAGS}")
-    string(REGEX REPLACE "\\+nodsp" "" CMAKE_CXX_LINK_FLAGS "${CMAKE_CXX_LINK_FLAGS}")
-    string(REGEX REPLACE "\\+nodsp" "" CMAKE_ASM_LINK_FLAGS "${CMAKE_ASM_LINK_FLAGS}")
-    # And uses different syntax for +nofp
-    string(REGEX REPLACE "\\+nofp" ".no_fp" CMAKE_C_LINK_FLAGS   "${CMAKE_C_LINK_FLAGS}")
-    string(REGEX REPLACE "\\+nofp" ".no_fp" CMAKE_CXX_LINK_FLAGS "${CMAKE_CXX_LINK_FLAGS}")
-    string(REGEX REPLACE "\\+nofp" ".no_fp" CMAKE_ASM_LINK_FLAGS "${CMAKE_ASM_LINK_FLAGS}")
-
-    string(REGEX REPLACE "\\+nomve" ".no_mve" CMAKE_C_LINK_FLAGS   "${CMAKE_C_LINK_FLAGS}")
-    string(REGEX REPLACE "\\+nomve" ".no_mve" CMAKE_CXX_LINK_FLAGS "${CMAKE_CXX_LINK_FLAGS}")
-    string(REGEX REPLACE "\\+nomve" ".no_mve" CMAKE_ASM_LINK_FLAGS "${CMAKE_ASM_LINK_FLAGS}")
+    string(REGEX REPLACE "\\+nodsp"         ""          ARMLINK_MAPPED_OPTION "${ARMLINK_MAPPED_OPTION}")
+    # And uses different syntax for +nofp, +nomve.fp, nomve
+    string(REGEX REPLACE "\\+nofp"          ".no_fp"    ARMLINK_MAPPED_OPTION "${ARMLINK_MAPPED_OPTION}")
+    string(REGEX REPLACE "\\+nomve\\.fp"    ".no_mvefp" ARMLINK_MAPPED_OPTION "${ARMLINK_MAPPED_OPTION}")
+    string(REGEX REPLACE "\\+nomve"         ".no_mve"   ARMLINK_MAPPED_OPTION "${ARMLINK_MAPPED_OPTION}")
+
+    set(CMAKE_C_LINK_FLAGS ${ARMLINK_MAPPED_OPTION})
+    set(CMAKE_CXX_LINK_FLAGS ${ARMLINK_MAPPED_OPTION})
+    set(CMAKE_ASM_LINK_FLAGS ${ARMLINK_MAPPED_OPTION})
 else()
     set(CMAKE_C_FLAGS "-march=${CMAKE_SYSTEM_ARCH}")
     set(CMAKE_CXX_FLAGS "-march=${CMAKE_SYSTEM_ARCH}")
+    set(CMAKE_ASM_FLAGS "--target=${CMAKE_ASM_COMPILER_TARGET} -march=${CMAKE_SYSTEM_ARCH}")
+
+    set(ARMLINK_MAPPED_OPTION "--cpu=${CMAKE_SYSTEM_PROCESSOR}")
+    # Mapping the architecture name
+    string(REGEX REPLACE "armv"         ""      ARMLINK_MAPPED_OPTION   "${ARMLINK_MAPPED_OPTION}")
+    # Armlink uses --fpu option instead of the generic extension names
+    string(REGEX REPLACE "\\+fp\\.dp"   ""      ARMLINK_MAPPED_OPTION   "${ARMLINK_MAPPED_OPTION}")
+    string(REGEX REPLACE "\\+nofp"      ""      ARMLINK_MAPPED_OPTION   "${ARMLINK_MAPPED_OPTION}")
+    # And different syntax for these features
+    string(REGEX REPLACE "\\+mve\\.fp"  ".mve.fp" ARMLINK_MAPPED_OPTION   "${ARMLINK_MAPPED_OPTION}")
+    string(REGEX REPLACE "\\+mve"       ".mve"  ARMLINK_MAPPED_OPTION   "${ARMLINK_MAPPED_OPTION}")
+    string(REGEX REPLACE "\\+dsp"       ".dsp"  ARMLINK_MAPPED_OPTION   "${ARMLINK_MAPPED_OPTION}")
+
+    set(CMAKE_C_LINK_FLAGS ${ARMLINK_MAPPED_OPTION})
+    set(CMAKE_CXX_LINK_FLAGS ${ARMLINK_MAPPED_OPTION})
+    set(CMAKE_ASM_LINK_FLAGS ${ARMLINK_MAPPED_OPTION})
 endif()
 
 set(BL2_COMPILER_CP_FLAG
@@ -198,9 +232,12 @@ if (CONFIG_TFM_FLOAT_ABI STREQUAL "hard")
         $<$<COMPILE_LANGUAGE:C>:-mfloat-abi=hard>
     )
     if (CONFIG_TFM_ENABLE_FP)
-        set(COMPILER_CP_FLAG
-            -mfpu=${CONFIG_TFM_FP_ARCH};-mfloat-abi=hard
-        )
+        if (TFM_SYSTEM_ARCHITECTURE STREQUAL "armv8.1-m.main")
+            # setting the -mfpu option disables the floating point mve, generic +fp.dp is used instead
+            set(COMPILER_CP_FLAG -mfloat-abi=hard)
+        else()
+            set(COMPILER_CP_FLAG -mfpu=${CONFIG_TFM_FP_ARCH};-mfloat-abi=hard)
+        endif()
         # armasm and armlink have the same option "--fpu" and are both used to
         # specify the target FPU architecture. So the supported FPU architecture
         # names can be shared by armasm and armlink.
-- 
2.34.1

