# Copyright 2023 Arm Limited and/or its affiliates
# <open-source-office@arm.com>
# SPDX-License-Identifier: MIT

default:
  # cancel the job if a new pipeline is triggered on the same branch
  interruptible: true
  image: ${OPEN_IOT_SDK_DOCKER_REGISTRY}/open-iot-sdk:${OPEN_IOT_SDK_DOCKER_VERSION}

include:
  local: '$PWD/tools/ci/pipeline-baseline-fri.yml'

variables:
  OPEN_IOT_SDK_DOCKER_VERSION: v2
  KUBERNETES_CPU_REQUEST: 1
  KUBERNETES_MEMORY_REQUEST: 1Gi
  GIT_SUBMODULE_STRATEGY: recursive
  RETRY_LIMIT: 100

# Those fragments contain base variables required by pipelines for applications.
# They can be used to set matrix parameters and extended using << : .anchor syntax
.pipeline_config_applications: &pipeline_config_applications
  TARGET: [corstone300, corstone310]
  TOOLCHAIN: [ARMCLANG, GNU]

stages:
  - quality-check
  - build
  - test
  - cleanup

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_REF_NAME =~ /^release-.*/
    - if: $CI_PIPELINE_SOURCE == "web"
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# This base job load the right docker image and sets some default variables
.base_job:
  extends: .base-job-rules
  tags:
    - iotmsw-amd64
  before_script:
    - python -m pip install pyelftools
    - |
      if [ $TARGET == "corstone300" ];then
        FVP_BIN=FVP_Corstone_SSE-300_Ethos-U55
      fi
    - |
      if [ $TARGET == "corstone310" ];then
        FVP_BIN=FVP_Corstone_SSE-310
      fi
  parallel:
    matrix:
      - *pipeline_config_applications
  variables:
    PYTHONUNBUFFERED: 1

# The test job extends .basejob. It add rules to map targets to FVP binaries,
# require the application to be built and retrieve the artifacts.
.test_job:
  stage: test
  extends: .base_job
  needs:
    - job: build-applications
      artifacts: true

# Build all the applications which later are tested.
build-applications:
  stage: build
  extends: .base_job
  script:
    - export APP_UNDERSCORED=$(echo ${APP} | tr '-' '_')
    - ./tools/ci/generate_credentials.sh -f -p applications/${APP_UNDERSCORED}/configs/aws_configs
    - git config --global user.email "ci@example.com"
    - git config --global user.name "ci"
    - ./tools/scripts/build.sh ${APP} --target $TARGET --toolchain $TOOLCHAIN --certificate_path $PWD/certificate.pem  --private_key_path $PWD/private_key.pem
    - |
      if [ $APP == "aws-iot-example" ];then
        tar -czf ${TARGET}_${APP}_${TOOLCHAIN}_build.tar.gz \
          build/${APP}_merged.elf \
          build/${APP}-update_signed.bin \
          build/update-signature.txt \
          applications/${APP_UNDERSCORED}/configs/aws_configs
      else
        tar -czf ${TARGET}_${APP}_${TOOLCHAIN}_build.tar.gz \
          build/${APP}_merged.elf
      fi
  parallel:
    matrix:
       -
         << : *pipeline_config_applications
         APP: [blinky, aws-iot-example]
  artifacts:
    paths:
      - ${TARGET}_${APP}_${TOOLCHAIN}_build.tar.gz
    expire_in: 1 week

test-applications-output:
  extends: .test_job
  script:
    - tar xf ${TARGET}_${APP}_${TOOLCHAIN}_build.tar.gz
    - export APP_UNDERSCORED=$(echo ${APP} | tr '-' '_')
    - |
      pytest -s tools/tests/test_application_output.py \
      --build-artefacts-path "build" \
      --fvp $FVP_BIN \
      --merged-elf-name "${APP}_merged.elf" \
      --timeout-seconds 600 \
      --pass-output-file "applications/${APP_UNDERSCORED}/tests/pass_output.log" \
      --fail-output-file "applications/${APP_UNDERSCORED}/tests/fail_output.log"
  parallel:
    matrix:
       -
         << : *pipeline_config_applications
         APP: [blinky]

test-ota:
  extends: .test_job
  script:
    - tar xf ${TARGET}_${APP}_${TOOLCHAIN}_build.tar.gz
    - export APP_UNDERSCORED=$(echo ${APP} | tr '-' '_')
    - |
      pytest -s tools/tests/test_ota.py \
      --build-artefacts-path "build" \
      --fvp $FVP_BIN \
      --credentials-path "applications/${APP_UNDERSCORED}/configs/aws_configs" \
      --merged-elf-name "${APP}_merged.elf" \
      --signed-update-bin-name "${APP}-update_signed.bin" \
      --timeout-seconds 900 \
      --pass-ota-output-file "applications/${APP_UNDERSCORED}/tests/pass_ota_output.log" \
      --fail-ota-output-file "applications/${APP_UNDERSCORED}/tests/fail_ota_output.log"
  parallel:
    matrix:
      -
        << : *pipeline_config_applications
        APP: [aws-iot-example]


integration-tests:
  stage: test
  extends: .base_job
  rules:
    - if: ( $SCHEDULED_JOB_TO_RUN == "integration-tests" )
  script:
    - export APP_UNDERSCORED=$(echo ${APP} | tr '-' '_')
    - ./tools/ci/generate_credentials.sh -f -p applications/${APP_UNDERSCORED}/configs/aws_configs
    - git config --global user.email "ci@example.com"
    - git config --global user.name "ci"
    - ./tools/scripts/build.sh -q ${APP}
    - pushd components/tools/freertos_libraries_integration_tests/library/tools/echo_server
    - go run echo_server.go&
    - popd
    - sleep 1
    - |
      pytest -s tools/tests/test_integration.py \
      --build-artefacts-path "build" \
      --fvp $FVP_BIN \
      --credentials-path "applications/${APP_UNDERSCORED}/configs/aws_configs" \
      --merged-elf-name "${APP}-tests_merged.elf" \
      --signed-update-bin-name "${APP}-tests-update_signed.bin"
  parallel:
    matrix:
      -
        << : *pipeline_config_applications
        APP: [aws-iot-example]

# The clean up only happens once daily when the `Daily OTA cleanup`
# scheduled pipeline sets the `SCHEDULED_JOB_TO_RUN` variable to `cleanup`.
aws-cleanup:
  stage: cleanup
  tags:
    - iotmsw-amd64
  rules:
    - if: $SCHEDULED_JOB_TO_RUN == "cleanup"
  script:
    - python -u ./tools/ci/aws_cleanup.py
