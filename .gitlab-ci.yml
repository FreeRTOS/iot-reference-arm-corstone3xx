# Copyright 2023-2024 Arm Limited and/or its affiliates
# <open-source-office@arm.com>
# SPDX-License-Identifier: MIT

default:
  # cancel the job if a new pipeline is triggered on the same branch
  interruptible: true
  image: ${OPEN_IOT_SDK_DOCKER_REGISTRY}/open-iot-sdk:${OPEN_IOT_SDK_DOCKER_VERSION}

include:
  local: '$PWD/tools/ci/pipeline-baseline-fri.yml'

variables:
  OPEN_IOT_SDK_DOCKER_VERSION: v2
  KUBERNETES_CPU_REQUEST: 1
  KUBERNETES_MEMORY_REQUEST: 1Gi
  GIT_SUBMODULE_STRATEGY: none
  RETRY_LIMIT: 100

# Those fragments contain base variables required by pipelines for applications.
# They can be used to set matrix parameters and extended using << : .anchor syntax
.pipeline_config_non_ml_applications: &pipeline_config_non_ml_applications
  TARGET: [corstone315, corstone310, corstone300]
  TOOLCHAIN: [ARMCLANG, GNU]
  INFERENCE: [ETHOS]
  AUDIO: [ROM]
.pipeline_config_ml_applications: &pipeline_config_ml_applications
  TARGET: [corstone315, corstone310, corstone300]
  TOOLCHAIN: [ARMCLANG, GNU]
  AUDIO: [ROM, VSI]
.pipeline_config_object_detection_applications: &pipeline_config_object_detection_applications
  TARGET: [corstone315]
  TOOLCHAIN: [ARMCLANG, GNU]
  INFERENCE: [ETHOS, SOFTWARE]
  AUDIO: [ROM]
  APP: [object-detection]

stages:
  - quality-check
  - build
  - test
  - cleanup

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_REF_NAME =~ /^release-.*/
    - if: $CI_PIPELINE_SOURCE == "web"
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# This base job load the right docker image and sets some default variables
.base_job:
  extends: .base-job-rules
  tags:
    - iotmsw-amd64
  before_script:
    - python -m pip install pyelftools
    - |
      if [ $TARGET == "corstone300" ];then
        FVP_BIN=FVP_Corstone_SSE-300_Ethos-U55
      fi
    - |
      if [ $TARGET == "corstone310" ];then
        FVP_BIN=FVP_Corstone_SSE-310
      fi
    - |
      if [ $TARGET == "corstone315" ];then
        FVP_BIN=FVP_Corstone_SSE-315
      fi
  parallel:
    matrix:
      - *pipeline_config_non_ml_applications
      - *pipeline_config_ml_applications
      - *pipeline_config_object_detection_applications
  variables:
    PYTHONUNBUFFERED: 1

# The test job extends .basejob. It add rules to map targets to FVP binaries,
# require the application to be built and retrieve the artifacts.
.test_job:
  stage: test
  extends: .base_job
  needs:
    - job: build-applications
      artifacts: true

# Build all the applications which later are tested.
build-applications:
  stage: build
  extends: .base_job
  script:
    - export APP_UNDERSCORED=$(echo ${APP} | tr '-' '_')
    - ./tools/ci/generate_credentials.sh -f -p applications/${APP_UNDERSCORED}/configs/aws_configs
    - git config --global user.email "ci@example.com"
    - git config --global user.name "ci"
    - |
      ./tools/scripts/build.sh ${APP} \
        --target $TARGET \
        --inference $INFERENCE \
        --audio $AUDIO \
        --toolchain $TOOLCHAIN \
        --certificate_path $PWD/certificate.pem \
        --private_key_path $PWD/private_key.pem
    - |
      if [ $APP == "blinky" ];then
        tar -czf ${TARGET}_${APP}_${TOOLCHAIN}_${INFERENCE}_${AUDIO}_build.tar.gz \
          build/${APP}_merged.elf
      else
        tar -czf ${TARGET}_${APP}_${TOOLCHAIN}_${INFERENCE}_${AUDIO}_build.tar.gz \
          build/${APP}_merged.elf \
          build/${APP}-update_signed.bin \
          build/update-signature.txt \
          applications/${APP_UNDERSCORED}/configs/aws_configs
      fi
  parallel:
    matrix:
       -
         << : *pipeline_config_non_ml_applications
         APP: [blinky]
       -
         << : *pipeline_config_ml_applications
         APP: [keyword-detection]
         INFERENCE: [ETHOS, SOFTWARE]
       -
         << : *pipeline_config_ml_applications
         APP: [speech-recognition]
         INFERENCE: [ETHOS]
       -
         << : *pipeline_config_object_detection_applications

  artifacts:
    paths:
      - ${TARGET}_${APP}_${TOOLCHAIN}_${INFERENCE}_${AUDIO}_build.tar.gz
    expire_in: 1 week
  variables:
    GIT_SUBMODULE_STRATEGY: recursive

test-blinky-output:
  extends: .test_job
  script:
    - tar xf ${TARGET}_${APP}_${TOOLCHAIN}_${INFERENCE}_${AUDIO}_build.tar.gz
    - |
        pytest -s tools/tests/test_blinky_output.py \
        --build-artefacts-path "build" \
        --fvp $FVP_BIN \
        --merged-elf-name "${APP}_merged.elf" \
        --timeout-seconds 900 \
        --pass-output-file "applications/${APP}/tests/pass_output.log" \
        --fail-output-file "applications/${APP}/tests/fail_output.log"
  parallel:
    matrix:
       -
         << : *pipeline_config_non_ml_applications
         APP: [blinky]

# The test-applications job should wait for build-applications job to finish as
# test-applications job uses the output build artifacts from build-applications job.
test-applications:
  extends: .test_job
  needs:
    - job: build-applications
      artifacts: true
  script:
    - tar xf ${TARGET}_${APP}_${TOOLCHAIN}_${INFERENCE}_${AUDIO}_build.tar.gz
    - export APP_UNDERSCORED=$(echo ${APP} | tr '-' '_')
    - |
      if [[ $AUDIO == "VSI" ]]; then
        pytest -s tools/tests/test_applications.py \
        --audio-file-path "applications/${APP_UNDERSCORED}/resources/test.wav" \
        --build-artefacts-path "build" \
        --fvp $FVP_BIN \
        --credentials-path "applications/${APP_UNDERSCORED}/configs/aws_configs" \
        --merged-elf-name "${APP}_merged.elf" \
        --signed-update-bin-name "${APP}-update_signed.bin" \
        --timeout-seconds 2700 \
        --pass-output-file "applications/${APP_UNDERSCORED}/tests/pass_output.log" \
        --fail-output-file "applications/${APP_UNDERSCORED}/tests/fail_output.log" \
        --pythonhome-path "/opt/python/3.9.18"
      elif [[ $APP == "object-detection" ]]; then
        pytest -s tools/tests/test_applications.py \
        --frm-file-path "applications/${APP_UNDERSCORED}/resources/test.frm" \
        --build-artefacts-path "build" \
        --fvp $FVP_BIN \
        --credentials-path "applications/${APP_UNDERSCORED}/configs/aws_configs" \
        --merged-elf-name "${APP}_merged.elf" \
        --signed-update-bin-name "${APP}-update_signed.bin" \
        --timeout-seconds 1800 \
        --pass-output-file "applications/${APP_UNDERSCORED}/tests/pass_output.log" \
        --fail-output-file "applications/${APP_UNDERSCORED}/tests/fail_output.log"
      else
        pytest -s tools/tests/test_applications.py \
        --build-artefacts-path "build" \
        --fvp $FVP_BIN \
        --credentials-path "applications/${APP_UNDERSCORED}/configs/aws_configs" \
        --merged-elf-name "${APP}_merged.elf" \
        --signed-update-bin-name "${APP}-update_signed.bin" \
        --timeout-seconds 2700 \
        --pass-output-file "applications/${APP_UNDERSCORED}/tests/pass_output.log" \
        --fail-output-file "applications/${APP_UNDERSCORED}/tests/fail_output.log"
      fi
  parallel:
    matrix:
       -
         << : *pipeline_config_ml_applications
         APP: [keyword-detection]
         INFERENCE: [ETHOS, SOFTWARE]
       -
         << : *pipeline_config_ml_applications
         APP: [speech-recognition]
         INFERENCE: [ETHOS]
       -
         << : *pipeline_config_object_detection_applications

integration-tests:
  stage: test
  extends: .base_job
  rules:
    - if: ( $SCHEDULED_JOB_TO_RUN == "integration-tests" )
  script:
    - export APP_UNDERSCORED=$(echo ${APP} | tr '-' '_')
    - ./tools/ci/generate_credentials.sh -f -p applications/${APP_UNDERSCORED}/configs/aws_configs
    - git config --global user.email "ci@example.com"
    - git config --global user.name "ci"
    - git config --global core.autocrlf input
    - ./tools/scripts/build.sh ${APP} --target $TARGET --toolchain $TOOLCHAIN --certificate_path $PWD/certificate.pem  --private_key_path $PWD/private_key.pem
    - pushd components/tools/freertos_libraries_integration_tests/library/tools/echo_server
    - go run echo_server.go&
    - popd
    - sleep 5
    - |
      pytest -s tools/tests/test_integration.py \
      --build-artefacts-path "build" \
      --fvp $FVP_BIN \
      --credentials-path "applications/${APP_UNDERSCORED}/configs/aws_configs" \
      --merged-elf-name "${APP}_merged.elf" \
      --signed-update-bin-name "${APP}-update_signed.bin" \
      --timeout-seconds 14400
  parallel:
    matrix:
      -
        << : *pipeline_config_non_ml_applications
        APP: [freertos-iot-libraries-tests]
  variables:
    GIT_SUBMODULE_STRATEGY: recursive

# The clean up only happens once daily when the `Daily OTA cleanup`
# scheduled pipeline sets the `SCHEDULED_JOB_TO_RUN` variable to `cleanup`.
aws-cleanup:
  stage: cleanup
  tags:
    - iotmsw-amd64
  rules:
    - if: $SCHEDULED_JOB_TO_RUN == "cleanup"
  script:
    - python -u ./tools/ci/aws_cleanup.py
